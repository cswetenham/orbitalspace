
TODO:
- Move all gl* calls out of orApp.cpp
- Want to present a similar System-style interface for graphics in orRender,
wrapping the GL calls
- Any lower-level wrapping/utility stuff could go in orGfx
- Want to fix up ID allocation system to allow deallocation

DONE - Kepler orbits
DONE - Real units/constants

TODO - Use Bullet physics or some other physics engine?

TODO - refactor into a proper engine

TODO - namespaces

TODO - task queues, something work-stealing with ideas from fJobQueue and the bitsquid job queues

TODO - tests!!

Camera - targeted, switching between targets (tab?) or free-roaming.
- two aspects: camera position, camera direction

first/third person cams:
- at target, third-person, prograde direction/retrograde direction
- at target, third-person, +ve/-ve(?) direction (wrt parent body)
- at target, third-person, up/down direction (wrt parent body)
- at target, third-person, looking at target2
- at target, first-person, all of the above

overview cams:
keep some target in view
keep multiple targets in view
keep entire orbit of some target in view
keep entire orbit of multiple targets in view
keep multiple targets, entire orbits of other multiple targets, in view

mixed?
- at target1, first/third-person, keep entire orbit of target2/multiple targets in view

Different intertial frames (?) - e.g show earth-moon orbit in "stationary" frame, or in rotating frame where the Lagrange points are stationary.

Add moon, earth-moon lagrange points? L points should come out of the sim ideally

Sphere of influence / patched conics

story/gameplay?

orbital police/enforcers? private/public?

how crowded is orbital space/various orbits?

how to chase, how to take down/capture?

Large nets between rockets - could surround target, but how would it force it to change orbit/immobilise
it once caught?

Lasers - have to keep in range/line of sight/firing arc for long enough

Kinectic slugs

Missiles

In real time, minutes or hours to respond to enemy orbit changes.

If see enemy can quickly estimate position, after a litte time velocity and thereby orbit

If see enemy burn can figure out new velocity, but also engine type, ship mass, etc.

If burn beyond horizon can make surprise/hidden orbit changes. The lower the orbit the easier it will be.

Scale of orbiting ships - satellites, modular stations, rotating stations, oneill cylinders?

Include normal traffic between orbit, landing and launching from surface of moon and earth?

// TODO Entity and other systems also need to support destroying objects.
// Need a policy for reuse of Ids/Handles
// - Valid until end of frame?
// - Have Ids keep incrementing so time till reuse is maximised?

// Strategy:
// - First make IDs into struct System::Id { uint32 value; }; or struct System::Type::Id { uint32 value; };
// Conversion to a uint32 is easy, but won't be incrementing them by accident.
// Fix any resulting errors. Remove numFoo(). Maybe an isValid() type method for debugging at least?
// - Then add a new function for destroy
// - construct/destruct
// - allocate/free
// - create/destroy
// - claim/release
// - add/remove
// - insert/erase
// - new/delete
// - do/undo
// - resume/yield
// make/unmake? raze? lose? end? finish? desist? give up? yield? demolish? dismantle? dispose? disavow? disown?
// release kind of works semantically but it suggests reference counting

// TODO Need a way to tie gameplay objects in save files to system objects; GUID?

// TODO Perftimer shouldn't use StaticInit/StaticShutdown

// TODO we start a seemingly huge number of threads on startup, and many of them die after a certain amount
// of time. The report that they have died comes when we call m_window->pollEvent(event).
// Would like to figure out where these come from.
// Idea: set ourselves up to poll events before every system has been brought up, bring them up one by one
// and see what happens with threads starting and ending.

// TODO finish/use orTask

// TODO Load solar system, ships, etc from a config files
// TODO give moon, earth correct orbit, inclination, rotation period, axial tilt.
// TODO give earth, moon rotation and orbit correct phase for J2000.
// TODO add Sun, other planets and moons

// TODO make the opaque IDs into strong typedefs for safety? (enum - not perfect. struct containing just an int?)

// TODO improve palettes

// TODO don't like the fact that EntitySystem depends on PhysicsSystem and RenderSystem

// TODO not happy "UpdateOrbit" lives in EntitySystem

// TODO move orGfx to orPlatform

// TODO figure out better packaging solution for Linux; just require devs to install SFML 2.0 to system location?

// TODO GravBody required to be told what its parent body is; want to remove that

// TODO Want to figure out a better way of storing and simulating large-scale stuff.
// For serveral purposed (camera, visualisation, etc) want to have notion of frames (inertial and rotating)
// Bodies could still have a "parent" body or system, deduced from masses and positions...
// Pos and vel could be stored relative to parent body.

// TODO Fix trail:
// Make methods into methods on RenderSystem instead.
// Fix case of switching camera: easiest solution is to just clear the trail.
// Switching it to a new frame of reference would actually mean storing the whole history of the system for a duration
// If trail is for a fixed length of wall-time, would want to clear the trail on time accel change too.

// TODO want to achieve orbits around L-points, maybe also Weak Stability Boundary low-energy transfers.
// For that need tools to allow achieving that.

// TODO far too easy to accelerate too much at the moment; ideally, would scale acceleration with time scale so you can
// always have the same level of responsiveness.

// TODO RenderSystem::render2D, RenderSystem::renderLabels have terrible params.

// TODO Should we have a renderer which just knows about the offscreen texture,
// and then a screen effect which renders it to screen with scaling, scanlines etc?

// TODO set up CONFIG_DEBUG, CONFIG_PROFILE

// TODO clean up rnd.h, put in namespace, template better
// TODO clean up util.h, put in namespace

// TODO want ability to record past simulation states and extrapolate future ones.
// Will need to support entities being created or destroyed; that means our history isn't just a big fixed-sized array for each frame.
// Will want to support AI; we'll want to be able to run the AI on predicted future states too.

// TODO UpdateOrbit needs to be broken up into several things.
// A simple keplerian projector
// Something that detects SOI switches
// Something that detects SOI switches and finds the actual switchover point to sub-frame accuracy
// An n-body forward projector

TODO replace own logging with SDL
TODO replace own timers with SDL
TODO replace own atomics with SDL?
TODO replace own util functions with SDL?

TODO move structs to a forward.h

TODO move TODOs from code into here!
